{"version":3,"file":"index.js","sources":["../src/wallets/metamask/setup.ts","../src/wallets/metamask/setup/isNewerVersion.ts","../src/wallets/metamask/setup/downloader.ts","../src/wallets/wallet.ts","../src/helpers/actions.ts","../src/helpers/selectors.ts","../src/wallets/metamask/actions/helpers/actions.ts","../src/wallets/metamask/actions/helpers/selectors.ts","../src/wallets/metamask/actions/util.ts","../src/wallets/metamask/actions/switchAccount.ts","../src/wallets/metamask/setup/setupActions.ts","../src/wallets/coinbase/actions.ts","../src/wallets/coinbase/coinbase.ts","../src/wallets/metamask/metamask.ts","../src/wallets/metamask/actions/addNetwork.ts","../src/wallets/metamask/actions/addToken.ts","../src/wallets/metamask/actions/approve.ts","../src/wallets/metamask/actions/createAccount.ts","../src/wallets/metamask/actions/allowNetworkSwitch.ts","../src/wallets/metamask/actions/confirmTransaction.ts","../src/wallets/metamask/actions/deleteAccount.ts","../src/wallets/metamask/actions/deleteNetwork.ts","../src/wallets/metamask/actions/getTokenBalance.ts","../src/wallets/metamask/actions/hasNetwork.ts","../src/wallets/metamask/actions/importPk.ts","../src/wallets/metamask/actions/lock.ts","../src/wallets/metamask/actions/sign.ts","../src/wallets/metamask/actions/switchNetwork.ts","../src/wallets/metamask/actions/unlock.ts","../src/wallets/wallets.ts","../src/launch.ts","../src/bootstrap.ts"],"sourcesContent":["import { Page } from 'playwright-core';\nimport { Step, WalletOptions } from '../wallets';\n\n/**\n * Setup MetaMask with base account\n * */\n\nexport const setup =\n  (page: Page, defaultMetamaskSteps: Step<WalletOptions>[]) =>\n  async <Options = WalletOptions>(options?: Options, steps: Step<Options>[] = defaultMetamaskSteps): Promise<void> => {\n    // goes through the installation steps required by metamask\n    for (const step of steps) {\n      await step(page, options);\n    }\n  };\n","export const isNewerVersion = (current: string, comparingWith: string): boolean => {\n  if (current === comparingWith) return false;\n\n  const currentFragments = current.replace(/[^\\d.-]/g, '').split('.');\n  const comparingWithFragments = comparingWith.replace(/[^\\d.-]/g, '').split('.');\n\n  const length =\n    currentFragments.length > comparingWithFragments.length ? currentFragments.length : comparingWithFragments.length;\n  for (let i = 0; i < length; i++) {\n    if ((Number(currentFragments[i]) || 0) === (Number(comparingWithFragments[i]) || 0)) continue;\n    return (Number(comparingWithFragments[i]) || 0) > (Number(currentFragments[i]) || 0);\n  }\n  return true;\n};\n","import * as fs from 'fs';\nimport { IncomingMessage } from 'http';\nimport { get } from 'https';\nimport * as os from 'os';\nimport * as path from 'path';\n\nimport StreamZip from 'node-stream-zip';\nimport { OfficialOptions } from '../../../types';\nimport { WalletIdOptions } from '../../wallets';\nimport { isNewerVersion } from './isNewerVersion';\n\nexport const EXTENSION_ID = 'gadekpdjmpjjnnemgnhkbjgnjpdaakgh';\nexport const EXTENSION_PUB_KEY =\n  'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnpiOcYGaEp02v5On5luCk/4g9j+ujgWeGlpZVibaSz6kUlyiZvcVNIIUXR568uv5NrEi5+j9+HbzshLALhCn9S43E7Ha6Xkdxs3kOEPBu8FRNwFh2S7ivVr6ixnl2FCGwfkP1S1r7k665eC1/xYdJKGCc8UByfSw24Rtl5odUqZX1SaE6CsQEMymCFcWhpE3fV+LZ6RWWJ63Zm1ac5KmKzXdj7wZzN3onI0Csc8riBZ0AujkThJmCR8tZt2PkVUDX9exa0XkJb79pe0Ken5Bt2jylJhmQB7R3N1pVNhNQt17Sytnwz6zG2YsB2XNd/1VYJe52cPNJc7zvhQJpHjh5QIDAQAB';\n\nexport type Path =\n  | string\n  | {\n      download: string;\n      extract: string;\n    };\n\nconst isEmpty = (path): boolean => {\n  const items = fs.readdirSync(path, { withFileTypes: true });\n  const files = items.filter((item) => item.isFile() && !item.name.startsWith('.'));\n  return files.length === 0;\n};\n\nexport default (walletId: WalletIdOptions, releasesUrl: string, recommendedVersion: string) =>\n  async (options: OfficialOptions): Promise<string> => {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    let EXTENSION_PATH;\n\n    const { version } = options;\n\n    if (version) {\n      /* eslint-disable no-console */\n      console.log(''); // new line\n      if (version === 'latest')\n        console.warn(\n          '\\x1b[33m%s\\x1b[0m',\n          `It is not recommended to run ${walletId} with \"latest\" version. Use it at your own risk or set to the recommended version \"${recommendedVersion}\".`,\n        );\n      else if (isNewerVersion(recommendedVersion, version))\n        console.warn(\n          '\\x1b[33m%s\\x1b[0m',\n          `Seems you are running a newer version (${version}) of ${walletId} than recommended by the Dappwright team.\n      Use it at your own risk or set to the recommended version \"${recommendedVersion}\".`,\n        );\n      else if (isNewerVersion(version, recommendedVersion))\n        console.warn(\n          '\\x1b[33m%s\\x1b[0m',\n          `Seems you are running an older version (${version}) of ${walletId} than recommended by the Dappwright team.\n      Use it at your own risk or set the recommended version \"${recommendedVersion}\".`,\n        );\n      else console.log(`Running tests on ${walletId} version ${version}`);\n\n      console.log(''); // new line\n\n      EXTENSION_PATH = await download(version, releasesUrl, downloadDir(walletId));\n    } else {\n      console.log(`Running tests on local ${walletId} build`);\n    }\n\n    return EXTENSION_PATH;\n  };\n\nexport const downloadDir = (walletId: WalletIdOptions): string => {\n  return path.resolve(os.tmpdir(), 'dappwright', walletId);\n};\n\nconst download = async (version: string, releasesUrl: string, location: string): Promise<string> => {\n  const extractDestination = path.resolve(location, version.replace(/\\./g, '_'));\n\n  if (version !== 'latest') {\n    if (fs.existsSync(extractDestination) && !isEmpty(extractDestination)) return extractDestination;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log('Downloading extension...');\n\n  const { filename, downloadUrl } = await getGithubRelease(releasesUrl, `v${version}`);\n\n  // Clean if system tmp files are cleaned but dir structure can persist\n  if (fs.existsSync(extractDestination) && isEmpty(extractDestination)) {\n    fs.rmdirSync(extractDestination, { recursive: true });\n  }\n\n  if (!fs.existsSync(extractDestination) || isEmpty(extractDestination)) {\n    const downloadedFile = await downloadGithubRelease(filename, downloadUrl, location);\n    const zip = new StreamZip.async({ file: downloadedFile });\n    fs.mkdirSync(extractDestination);\n    await zip.extract(null, extractDestination);\n\n    // Set the chrome extension to value of EXTENSION_ID\n    const manifestPath = path.resolve(extractDestination, 'manifest.json');\n    const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf-8'));\n    manifest.key = EXTENSION_PUB_KEY;\n    fs.writeFileSync(manifestPath, JSON.stringify(manifest));\n  }\n  return extractDestination;\n};\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst request = (url: string): Promise<IncomingMessage> =>\n  new Promise((resolve) => {\n    const request = get(url, (response) => {\n      if (response.statusCode == 302) {\n        const redirectRequest = get(response.headers.location, resolve);\n        redirectRequest.on('error', (error) => {\n          // eslint-disable-next-line no-console\n          console.warn('request redirected error:', error.message);\n          throw error;\n        });\n      } else {\n        resolve(response);\n      }\n    });\n    request.on('error', (error) => {\n      // eslint-disable-next-line no-console\n      console.warn('request error:', error.message);\n      throw error;\n    });\n  });\n\nconst downloadGithubRelease = (name: string, url: string, location: string): Promise<string> =>\n  // eslint-disable-next-line no-async-promise-executor\n  new Promise(async (resolve) => {\n    if (!fs.existsSync(location)) {\n      fs.mkdirSync(location, { recursive: true });\n    }\n    const fileLocation = path.join(location, name);\n    const file = fs.createWriteStream(fileLocation);\n    const stream = await request(url);\n    stream.pipe(file);\n    stream.on('end', () => {\n      resolve(fileLocation);\n    });\n  });\n\ntype GithubRelease = { downloadUrl: string; filename: string; tag: string };\nconst getGithubRelease = (releasesUrl: string, version: string): Promise<GithubRelease> =>\n  new Promise((resolve, reject) => {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const options = { headers: { 'User-Agent': 'Mozilla/5.0' } };\n    if (process.env.GITHUB_TOKEN) options.headers['Authorization'] = `Bearer ${process.env.GITHUB_TOKEN}`;\n    const request = get(releasesUrl, options, (response) => {\n      let body = '';\n      response.on('data', (chunk) => {\n        body += chunk;\n      });\n\n      response.on('end', () => {\n        const data = JSON.parse(body);\n        if (data.message) return reject(data.message);\n        for (const result of data) {\n          if (result.draft) continue;\n          if (version === 'latest' || result.name.includes(version) || result.tag_name.includes(version)) {\n            for (const asset of result.assets) {\n              if (asset.name.includes('chrome'))\n                resolve({\n                  downloadUrl: asset.browser_download_url,\n                  filename: asset.name,\n                  tag: result.tag_name,\n                });\n            }\n          }\n        }\n        reject(`Version ${version} not found!`);\n      });\n    });\n    request.on('error', (error) => {\n      // eslint-disable-next-line no-console\n      console.warn('getGithubRelease error:', error.message);\n      throw error;\n    });\n  });\n","import { Page } from 'playwright-core';\nimport { AddNetwork, AddToken, Dappwright, OfficialOptions, TransactionOptions } from '../types';\nimport { Step, WalletIdOptions, WalletOptions } from './wallets';\n\nexport default abstract class Wallet implements Dappwright {\n  version: string;\n  page: Page;\n\n  constructor(page: Page) {\n    this.page = page;\n  }\n\n  // Name of the wallet\n  static id: WalletIdOptions;\n  static recommendedVersion: string;\n  static releasesUrl: string;\n  static homePath: string;\n\n  // Extension downloader\n  static download: (options: OfficialOptions) => Promise<string>;\n\n  // Setup\n  abstract setup: (options?: WalletOptions, steps?: Step<WalletOptions>[]) => Promise<void>;\n  abstract defaultSetupSteps: Step<WalletOptions>[];\n\n  // Wallet actions\n  abstract addNetwork: (options: AddNetwork) => Promise<void>;\n  abstract addToken: (options: AddToken) => Promise<void>;\n  abstract approve: () => Promise<void>;\n  abstract createAccount: () => Promise<void>;\n  abstract confirmNetworkSwitch: () => Promise<void>;\n  abstract confirmTransaction: (options?: TransactionOptions) => Promise<void>;\n  abstract deleteAccount: (accountNumber: number) => Promise<void>;\n  abstract deleteNetwork: (name: string) => Promise<void>;\n  abstract getTokenBalance: (tokenSymbol: string) => Promise<number>;\n  abstract hasNetwork: (name: string) => Promise<boolean>;\n  abstract importPK: (pk: string) => Promise<void>;\n  abstract lock: () => Promise<void>;\n  abstract sign: () => Promise<void>;\n  abstract switchAccount: (accountNumber: number) => Promise<void>;\n  abstract switchNetwork: (network: string) => Promise<void>;\n  abstract unlock: (password?: string) => Promise<void>;\n}\n","import { Page } from 'playwright-core';\nimport { getElementByContent, getInputByLabel } from '.';\n\nexport const waitForChromeState = async (page: Page): Promise<void> => {\n  await page.waitForTimeout(3000);\n};\n\nexport const clickOnElement = async (page: Page, text: string, type?: string): Promise<void> => {\n  const element = await getElementByContent(page, text, type);\n  await element.click();\n};\n\nexport const clickOnButton = async (page: Page, text: string): Promise<void> => {\n  const button = await getElementByContent(page, text, 'button');\n  await button.click();\n};\n\n/**\n *\n * @param page\n * @param label\n * @param text\n * @param clear\n * @param excludeSpan\n * @param optional\n * @returns true if found and updated, false otherwise\n */\nexport const typeOnInputField = async (\n  page: Page,\n  label: string,\n  text: string,\n  clear = false,\n  excludeSpan = false,\n  optional = false,\n): Promise<boolean> => {\n  let input;\n  try {\n    input = await getInputByLabel(page, label, excludeSpan, 5000);\n  } catch (e) {\n    if (optional) return false;\n    throw e;\n  }\n\n  if (clear)\n    await page.evaluate((node) => {\n      node.value = '';\n    }, input);\n  await input.type(text);\n  return true;\n};\n","import { ElementHandle, Page } from 'playwright-core';\n\nexport const getElementByContent = (page: Page, text: string, type = '*'): Promise<ElementHandle | null> =>\n  page.waitForSelector(`//${type}[contains(text(), '${text}')]`);\n\nexport const getInputByLabel = (\n  page: Page,\n  text: string,\n  excludeSpan = false,\n  timeout = 2000,\n): Promise<ElementHandle> =>\n  page.waitForSelector(\n    [\n      `//label[contains(.,'${text}')]/following-sibling::textarea`,\n      `//label[contains(.,'${text}')]/following-sibling::*//input`,\n      `//h6[contains(.,'${text}')]/parent::node()/parent::node()/following-sibling::input`,\n      `//h6[contains(.,'${text}')]/parent::node()/parent::node()/following-sibling::*//input`,\n      ...(!excludeSpan\n        ? [\n            `//span[contains(.,'${text}')]/parent::node()/parent::node()/following-sibling::*//input`,\n            `//span[contains(.,'${text}')]/following-sibling::*//input`,\n          ]\n        : []),\n    ].join('|'),\n    { timeout },\n  );\n\nexport const getInputByLabelSelector = (text: string, excludeSpan = false): string =>\n  [\n    `//label[contains(.,'${text}')]/following-sibling::textarea`,\n    `//label[contains(.,'${text}')]/following-sibling::*//input`,\n    `//h6[contains(.,'${text}')]/parent::node()/parent::node()/following-sibling::input`,\n    `//h6[contains(.,'${text}')]/parent::node()/parent::node()/following-sibling::*//input`,\n    ...(!excludeSpan\n      ? [\n          `//span[contains(.,'${text}')]/parent::node()/parent::node()/following-sibling::*//input`,\n          `//span[contains(.,'${text}')]/following-sibling::*//input`,\n        ]\n      : []),\n  ].join('|');\n","import { Page } from 'playwright-core';\nimport { getAccountMenuButton, getSettingsSwitch } from '.';\n\nexport const clickOnSettingsSwitch = async (page: Page, text: string): Promise<void> => {\n  const button = await getSettingsSwitch(page, text);\n  await button.click();\n};\n\nexport const openNetworkDropdown = async (page: Page): Promise<void> => {\n  const networkSwitcher = await page.waitForSelector('.network-display');\n  await networkSwitcher.click();\n  await page.waitForSelector('li.dropdown-menu-item');\n};\n\nexport const openProfileDropdown = async (page: Page): Promise<void> => {\n  const accountSwitcher = await page.waitForSelector('.account-menu__icon');\n  await accountSwitcher.click({ noWaitAfter: true, force: true });\n};\n\nexport const openAccountDropdown = async (page: Page): Promise<void> => {\n  const accMenu = await getAccountMenuButton(page);\n  await accMenu.click();\n  await page.waitForSelector('.menu__container.account-options-menu');\n};\n\nexport const clickOnLogo = async (page: Page): Promise<void> => {\n  const header = await page.waitForSelector('.app-header__logo-container');\n  await header.click();\n};\n","import { ElementHandle, Page } from 'playwright-core';\n\nexport const getSettingsSwitch = (page: Page, text: string): Promise<ElementHandle | null> =>\n  page.waitForSelector(\n    [\n      `//span[contains(.,'${text}')]/parent::div/following-sibling::div/div/div/div`,\n      `//span[contains(.,'${text}')]/parent::div/following-sibling::div/div/label/div`,\n    ].join('|'),\n  );\n\nexport const getErrorMessage = async (page: Page): Promise<string | false> => {\n  const options: Parameters<Page['waitForSelector']>[1] = { timeout: 1000 };\n\n  const errorElement = await Promise.race([\n    page.waitForSelector(`span.error`, options),\n    page.waitForSelector(`.typography--color-error-1`, options),\n    page.waitForSelector(`.typography--color-error-default`, options),\n    page.waitForSelector(`.form-field__input--error`, options),\n  ]).catch(() => null);\n  if (!errorElement) return false;\n  return (errorElement as HTMLElement).innerText;\n};\n\nexport const getAccountMenuButton = (page: Page): Promise<ElementHandle | null> =>\n  page.waitForSelector(`button.menu-bar__account-options`);\n","import { Page } from 'playwright-core';\nimport { EXTENSION_ID } from '../setup/downloader';\n\nexport const performPopupAction = async (page: Page, action: (popup: Page) => Promise<void>): Promise<void> => {\n  let popup = null;\n  try{\n    popup = await page.context().waitForEvent('page', { timeout: 5000 }); // Wait for the popup to show up\n  } catch(e){\n    console.log(e)\n    console.log(\"Failed to get a popup. let's see if it already pops\")\n    let pages = page.context().pages();\n    for(let i=pages.length-1;i>=0;i--){\n      let p = pages[i]\n      if(p.url().includes(EXTENSION_ID+\"/notification.html\")){\n        popup = p;\n        break;\n      }\n    }\n    if(!popup){\n      throw Error(\"Metamask Cannot find popup page\")\n    }\n  }\n\n  await action(popup);\n  if (!popup.isClosed()) \n  {\n    try{\n      await popup.waitForEvent('close', { timeout: 5000 });\n    } catch(e){\n      console.log(\"Popup maybe not closed correctly\")\n    }\n  }\n\n};\n","import { Page } from 'playwright-core';\nimport { clickOnElement } from '../../../helpers';\nimport { openProfileDropdown } from './helpers';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const switchAccount =\n  (page: Page) =>\n  async (accountNumber: number): Promise<void> => {\n    await page.bringToFront();\n    await page.waitForTimeout(500); // TODO: waiting for other states didn't work\n    await openProfileDropdown(page);\n\n    // TODO: use different approach? maybe change param to account name\n    await clickOnElement(page, `Account ${accountNumber}`);\n  };\n","import { Page } from 'playwright-core';\n\nimport { clickOnButton, clickOnElement, typeOnInputField, waitForChromeState } from '../../../helpers';\nimport { WalletOptions } from '../../wallets';\nimport { clickOnLogo, clickOnSettingsSwitch, openNetworkDropdown } from '../actions/helpers';\n\nexport async function showTestNets(metamaskPage: Page): Promise<void> {\n  await openNetworkDropdown(metamaskPage);\n\n  await clickOnElement(metamaskPage, 'Show/hide');\n  await clickOnSettingsSwitch(metamaskPage, 'Advanced gas controls');\n  await clickOnSettingsSwitch(metamaskPage, 'Show test networks');\n  await clickOnLogo(metamaskPage);\n  await waitForChromeState(metamaskPage);\n}\n\nexport async function importWallet(metamaskPage: Page): Promise<void> {\n  await metamaskPage.getByTestId('onboarding-import-wallet').click();\n  await metamaskPage.getByTestId('import-srp-confirm').click();\n  await metamaskPage.getByTestId('create-password-new').fill('sdfsdf');\n  await metamaskPage.getByTestId('create-password-confirm').click();\n  await metamaskPage.getByTestId('create-password-confirm').fill('sdfsdfs');\n  await metamaskPage.getByTestId('create-password-new').dblclick();\n  await metamaskPage.getByTestId('create-password-new').fill('10keylabs');\n  await metamaskPage.getByTestId('create-password-new').press('Tab');\n  await metamaskPage.getByTestId('create-password-confirm').fill('10keylabs');\n  await metamaskPage.getByTestId('create-password-import').click();\n  await metamaskPage.getByTestId('onboarding-complete-done').click();\n  await metamaskPage.getByTestId('pin-extension-next').click();\n  await metamaskPage.getByTestId('pin-extension-done').click();\n}\n\nexport async function noThanksTelemetry(metamaskPage: Page): Promise<void> {\n  await clickOnButton(metamaskPage, 'No thanks');\n}\n\nexport async function importAccount(\n  metamaskPage: Page,\n  { seed = 'already turtle birth enroll since owner keep patch skirt drift any dinner' }: WalletOptions,\n): Promise<void> {\n  await metamaskPage.getByTestId('onboarding-import-wallet').click();\n  await metamaskPage.getByTestId('metametrics-i-agree').click();\n\n  for (const [index, seedPart] of seed.split(' ').entries())\n    await typeOnInputField(metamaskPage, `${index + 1}.`, seedPart);\n\n  await metamaskPage.getByTestId('import-srp-confirm').click();\n}\n\nexport async function createPassword(metamaskPage: Page, { password = 'password1234' }: WalletOptions): Promise<void> {\n  await metamaskPage.getByTestId('create-password-new').fill(password);\n  await metamaskPage.getByTestId('create-password-confirm').fill(password);\n  await metamaskPage.getByTestId('create-password-terms').click();\n  await metamaskPage.getByTestId('create-password-import').click();\n}\n\nexport async function clearOnboardingHelp(metamaskPage: Page): Promise<void> {\n  await metamaskPage.getByTestId('onboarding-complete-done').click();\n  await metamaskPage.getByTestId('pin-extension-next').click();\n  await metamaskPage.getByTestId('pin-extension-done').click();\n}\n\nexport const closePopup = async (page: Page): Promise<void> => {\n  /* For some reason popup deletes close button and then create new one (react stuff)\n   * hacky solution can be found here => https://github.com/puppeteer/puppeteer/issues/3496 */\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n  if (await page.locator('.popover-header__button').isVisible()) {\n    await page.$eval('.popover-header__button', (node: HTMLElement) => node.click());\n  }\n};\n","import { ElementHandle, Page } from 'playwright-core';\nimport { AddNetwork, AddToken } from '../..';\nimport { waitForChromeState } from '../../helpers';\nimport { performPopupAction } from '../metamask/actions';\nimport { WalletOptions } from '../wallets';\n\nconst goHome = async (page: Page): Promise<void> => {\n  await page.getByTestId('portfolio-navigation-link').click();\n};\n\nexport const navigateHome = async (page: Page): Promise<void> => {\n  await page.goto(page.url().split('?')[0]);\n};\n\nexport async function getStarted(\n  page: Page,\n  {\n    seed = 'already turtle birth enroll since owner keep patch skirt drift any dinner',\n    password = 'password1234!!!!',\n  }: WalletOptions,\n): Promise<void> {\n  // Welcome screen\n  await page.getByTestId('btn-import-existing-wallet').click();\n\n  // Import Wallet\n  await page.getByTestId('btn-import-recovery-phrase').click();\n  await page.getByTestId('seed-phrase-input').fill(seed);\n  await page.getByTestId('btn-import-wallet').click();\n  await page.getByTestId('setPassword').fill(password);\n  await page.getByTestId('setPasswordVerify').fill(password);\n  await page.getByTestId('terms-and-privacy-policy').check();\n  await page.getByTestId('btn-password-continue').click();\n\n  // Allow extension state/settings to settle\n  await waitForChromeState(page);\n}\n\nexport const approve = (page: Page) => async (): Promise<void> => {\n  await performPopupAction(page, async (popup: Page) => {\n    await popup.getByTestId('allow-authorize-button').click();\n  });\n};\n\nexport const sign = (page: Page) => async (): Promise<void> => {\n  await performPopupAction(page, async (popup: Page) => {\n    await popup.getByTestId('sign-message').click();\n  });\n};\n\nexport const lock = (page: Page) => async (): Promise<void> => {\n  await page.getByTestId('settings-navigation-link').click();\n  await page.getByTestId('lock-wallet-button').click();\n};\n\nexport const unlock =\n  (page: Page) =>\n  async (password = 'password1234!!!!'): Promise<void> => {\n    await page.getByTestId('unlock-with-password').fill(password);\n    await page.getByTestId('unlock-wallet-button').click();\n\n    // Go back home since wallet returns to last visited page when unlocked.\n    await goHome(page);\n\n    // Wait for homescreen data to load\n    await page.waitForSelector(\"//div[@data-testid='asset-list']//*[not(text='')]\", { timeout: 10000 });\n  };\n\nexport const confirmTransaction = (page: Page) => async (): Promise<void> => {\n  await performPopupAction(page, async (popup: Page): Promise<void> => {\n    try {\n      // Help prompt appears once\n      await (await popup.waitForSelector(\"text='Got it'\", { timeout: 1000 })).click();\n    } catch {\n      // Ignore missing help prompt\n    }\n\n    await popup.getByTestId('request-confirm-button').click();\n  });\n};\n\nexport const addNetwork =\n  (page: Page) =>\n  async (options: AddNetwork): Promise<void> => {\n    // Add network flow closes current screen and opens another, direct access is cleaner for now\n    const settingsPage = await page.context().newPage();\n    await settingsPage.goto(`${page.url()}?internalPopUpRequest=true&action=addCustomNetwork`);\n    await settingsPage.getByTestId('custom-network-name-input').fill(options.networkName);\n    await settingsPage.getByTestId('custom-network-rpc-url-input').fill(options.rpc);\n    await settingsPage.getByTestId('custom-network-chain-id-input').fill(options.chainId.toString());\n    await settingsPage.getByTestId('custom-network-currency-symbol-input').fill(options.symbol);\n    await settingsPage.getByTestId('custom-network-save').click();\n\n    // Check for error messages\n    let errorNode;\n    try {\n      errorNode = await settingsPage.waitForSelector('//span[@data-testid=\"text-input-error-label\"]', {\n        timeout: 50,\n      });\n    } catch {\n      // No errors found\n    }\n\n    if (errorNode) {\n      const errorMessage = await errorNode.textContent();\n      await settingsPage.close();\n      throw new SyntaxError(errorMessage);\n    }\n\n    await settingsPage.waitForEvent('close');\n\n    // New network isn't reflected until page is reloaded\n    await page.bringToFront();\n    await page.reload();\n  };\n\nexport const deleteNetwork =\n  (page: Page) =>\n  async (name: string): Promise<void> => {\n    await page.getByTestId('settings-navigation-link').click();\n    await page.getByTestId('settings-networks-menu-cell-pressable').click();\n\n    // Search for network then click on the first result\n    await page.getByTestId('network-list-search').fill(name);\n    await (await page.waitForSelector('//div[@data-testid=\"list-\"][1]//button')).click();\n\n    await page.getByTestId('custom-network-delete').click();\n    await goHome(page);\n  };\n\nexport const hasNetwork =\n  (page: Page) =>\n  async (name: string): Promise<boolean> => {\n    await page.getByTestId('settings-navigation-link').click();\n    await page.getByTestId('settings-networks-menu-cell-pressable').click();\n    await page.getByTestId('network-list-search').fill(name);\n    const networkIsListed = await page.isVisible('//div[@data-testid=\"list-\"][1]//button');\n    await goHome(page);\n    return networkIsListed;\n  };\n\nexport const getTokenBalance =\n  (page: Page) =>\n  async (tokenSymbol: string): Promise<number> => {\n    const readFromCryptoTab = async (): Promise<ElementHandle<SVGElement | HTMLElement>> => {\n      await page.bringToFront();\n      await page.getByTestId('portfolio-selector-nav-tabLabel--crypto').click();\n      return await page.waitForSelector(\n        `//button[contains(@data-testid, \"asset-item\")][contains(@data-testid, \"${tokenSymbol}\")]`,\n        {\n          timeout: 500,\n        },\n      );\n    };\n\n    const readFromTestnetTab = async (): Promise<ElementHandle<SVGElement | HTMLElement>> => {\n      await page.getByTestId('portfolio-selector-nav-tabLabel--testnet').click();\n      return await page.waitForSelector(\n        `//button[contains(@data-testid, \"asset-item\")][contains(@data-testid, \"${tokenSymbol}\")]`,\n        {\n          timeout: 500,\n        },\n      );\n    };\n\n    const readAttempts = [readFromCryptoTab, readFromTestnetTab];\n\n    let button: ElementHandle<SVGElement | HTMLElement>;\n    for (const readAttempt of readAttempts) {\n      try {\n        button = await readAttempt();\n      } catch {\n        // Failed to read token value\n      }\n    }\n\n    if (!button) return 0;\n\n    const text = await button.textContent();\n    const currencyAmount = text.replaceAll(/ |,/g, '').split(tokenSymbol)[2];\n\n    return currencyAmount ? Number(currencyAmount) : 0;\n  };\n\nexport const createAccount = (page: Page) => async (): Promise<void> => {\n  await page.getByTestId('portfolio-header--switcher-cell-pressable').click();\n  await page.getByTestId('wallet-switcher--manage').click();\n  await page.getByTestId('manage-wallets-account-item--action-cell-pressable').click();\n\n  // Help prompt appears once\n  try {\n    await page.getByTestId('add-new-wallet--continue').click();\n  } catch {\n    // Ignore missing help prompt\n  }\n\n  await waitForChromeState(page);\n};\n\nexport const switchAccount =\n  (page: Page) =>\n  async (i: number): Promise<void> => {\n    await page.getByTestId('portfolio-header--switcher-cell-pressable').click();\n    await (\n      await page.waitForSelector(`(//button[@data-testid=\"wallet-switcher--wallet-item-cell-pressable\"])[${i}]`)\n    ).click();\n  };\n\n//\n// Unimplemented actions\n//\n\nexport const deleteAccount = async (_i: number): Promise<void> => {\n  // eslint-disable-next-line no-console\n  console.warn('deleteAccount not implemented - Coinbase does not support importing/removing additional private keys');\n};\n\nexport const addToken = async (_: AddToken): Promise<void> => {\n  // eslint-disable-next-line no-console\n  console.warn('addToken not implemented - Coinbase does not support adding custom tokens');\n};\n\nexport const importPK = async (_: string): Promise<void> => {\n  // eslint-disable-next-line no-console\n  console.warn('importPK not implemented - Coinbase does not support importing/removing private keys');\n};\n\nexport const switchNetwork = async (_: string): Promise<void> => {\n  // eslint-disable-next-line no-console\n  console.warn('switchNetwork not implemented');\n};\n\n// TODO: Cannot implement until verified coinbase wallet bug is fixed.\nexport const confirmNetworkSwitch = async (): Promise<void> => {\n  // eslint-disable-next-line no-console\n  console.warn('confirmNetorkSwitch not implemented');\n};\n","import { setup } from '../metamask/setup';\nimport downloader from '../metamask/setup/downloader';\nimport Wallet from '../wallet';\nimport { Step, WalletIdOptions, WalletOptions } from '../wallets';\nimport {\n  addNetwork,\n  addToken,\n  approve,\n  confirmNetworkSwitch,\n  confirmTransaction,\n  createAccount,\n  deleteAccount,\n  deleteNetwork,\n  getStarted,\n  getTokenBalance,\n  hasNetwork,\n  importPK,\n  lock,\n  navigateHome,\n  sign,\n  switchAccount,\n  switchNetwork,\n  unlock,\n} from './actions';\n\nexport class CoinbaseWallet extends Wallet {\n  static id = 'coinbase' as WalletIdOptions;\n  static recommendedVersion = '3.6.0';\n  static releasesUrl = 'https://api.github.com/repos/TenKeyLabs/coinbase-wallet-archive/releases';\n  static homePath = '/index.html';\n\n  options: WalletOptions;\n\n  // Extension Downloader\n  static download = downloader(this.id, this.releasesUrl, this.recommendedVersion);\n\n  // Setup\n  defaultSetupSteps: Step<WalletOptions>[] = [getStarted, navigateHome];\n  setup = setup(this.page, this.defaultSetupSteps);\n\n  // Actions\n  addNetwork = addNetwork(this.page);\n  addToken = addToken;\n  approve = approve(this.page);\n  createAccount = createAccount(this.page);\n  confirmNetworkSwitch = confirmNetworkSwitch;\n  confirmTransaction = confirmTransaction(this.page);\n  deleteAccount = deleteAccount;\n  deleteNetwork = deleteNetwork(this.page);\n  getTokenBalance = getTokenBalance(this.page);\n  hasNetwork = hasNetwork(this.page);\n  importPK = importPK;\n  lock = lock(this.page);\n  sign = sign(this.page);\n  switchAccount = switchAccount(this.page);\n  switchNetwork = switchNetwork;\n  unlock = unlock(this.page);\n}\n","import Wallet from '../wallet';\nimport { Step, WalletIdOptions, WalletOptions } from '../wallets';\nimport {\n  addNetwork,\n  addToken,\n  approve,\n  confirmTransaction,\n  createAccount,\n  deleteAccount,\n  deleteNetwork,\n  getTokenBalance,\n  importPk,\n  lock,\n  sign,\n  switchAccount,\n  switchNetwork,\n  unlock,\n} from './actions';\nimport { allowNetworkSwitch as confirmNetworkSwitch } from './actions/allowNetworkSwitch';\nimport { hasNetwork } from './actions/hasNetwork';\nimport { setup } from './setup';\nimport downloader from './setup/downloader';\nimport { clearOnboardingHelp, closePopup, createPassword, importAccount, showTestNets } from './setup/setupActions';\n\nexport class MetaMaskWallet extends Wallet {\n  static id = 'metamask' as WalletIdOptions;\n  static recommendedVersion = '10.25.0';\n  static releasesUrl = 'https://api.github.com/repos/metamask/metamask-extension/releases';\n  static homePath = '/home.html';\n\n  options: WalletOptions;\n\n  // Extension Downloader\n  static download = downloader(this.id, this.releasesUrl, this.recommendedVersion);\n\n  // Setup\n  defaultSetupSteps: Step<WalletOptions>[] = [\n    importAccount,\n    createPassword,\n    clearOnboardingHelp,\n    closePopup,\n    showTestNets,\n  ];\n  setup = setup(this.page, this.defaultSetupSteps);\n\n  // Actions\n  addNetwork = addNetwork(this.page);\n  addToken = addToken(this.page);\n  approve = approve(this.page);\n  createAccount = createAccount(this.page);\n  confirmNetworkSwitch = confirmNetworkSwitch(this.page);\n  confirmTransaction = confirmTransaction(this.page);\n  deleteAccount = deleteAccount(this.page);\n  deleteNetwork = deleteNetwork(this.page);\n  getTokenBalance = getTokenBalance(this.page);\n  hasNetwork = hasNetwork(this.page);\n  importPK = importPk(this.page);\n  lock = lock(this.page);\n  sign = sign(this.page);\n  switchAccount = switchAccount(this.page);\n  switchNetwork = switchNetwork(this.page);\n  unlock = unlock(this.page);\n}\n","import { Page } from 'playwright-core';\nimport { clickOnButton } from '../../../helpers';\n\nimport { AddNetwork } from '../../../index';\nimport { clickOnLogo, getErrorMessage, openNetworkDropdown } from './helpers';\n\nexport const addNetwork =\n  (page: Page) =>\n  async ({ networkName, rpc, chainId, symbol }: AddNetwork): Promise<void> => {\n    await page.bringToFront();\n    await openNetworkDropdown(page);\n    await clickOnButton(page, 'Add network');\n\n    await page.getByTestId('network-display').click();\n    await page.getByRole('button', { name: 'Add network' }).click();\n    await page.getByTestId('add-network-manually').click();\n    await page.getByLabel('Network name').fill(networkName);\n    await page.getByLabel('New RPC URL').fill(rpc);\n    await page.getByLabel('Chain ID').fill(String(chainId));\n    await page.getByLabel('Currency symbol').fill(symbol);\n\n    const errorMessage = await getErrorMessage(page);\n    if (errorMessage) {\n      await clickOnLogo(page);\n      throw new SyntaxError(errorMessage);\n    }\n\n    await clickOnButton(page, 'Save');\n\n    await page.waitForSelector(`//*[text() = '${networkName}']`);\n\n    const gotItButtonVisible = await page.isVisible(`//button[contains(text(), 'Got it')]`);\n    if (gotItButtonVisible) await clickOnButton(page, 'Got it');\n  };\n","import { Page } from 'playwright-core';\nimport { clickOnButton, clickOnElement, getInputByLabel, typeOnInputField } from '../../../helpers';\nimport { AddToken } from '../../../types';\n\nexport const addToken =\n  (page: Page) =>\n  async ({ tokenAddress, symbol, decimals = 0 }: AddToken): Promise<void> => {\n    await page.bringToFront();\n\n    await clickOnElement(page, 'Import tokens');\n    await page.waitForTimeout(500);\n    await clickOnButton(page, 'Custom token');\n    await typeOnInputField(page, 'Token contract address', tokenAddress);\n\n    // TODO: handle case when contract is not containing symbol\n    // const symbolInput = await getInputByLabelSelector('Token symbol');\n\n    if (symbol) {\n      await typeOnInputField(page, 'Token symbol', symbol, true);\n    }\n\n    const decimalsInput = await getInputByLabel(page, 'Token decimal');\n    if (!(await decimalsInput.isDisabled())) await decimalsInput.type(String(decimals));\n\n    await clickOnButton(page, 'Add custom token');\n    await clickOnButton(page, 'Import tokens');\n  };\n","import { Page } from 'playwright-core';\n\nimport { clickOnButton, waitForChromeState } from '../../../helpers';\nimport { performPopupAction } from './util';\n\nexport const approve = (page: Page) => async (): Promise<void> => {\n  await performPopupAction(page, async (popup) => {\n    // Wait for popup to load\n    await popup.waitForLoadState();\n    await popup.bringToFront();\n\n    // Select first account\n    await popup.locator('input[type=\"checkbox\"]').first().check();\n\n    // Go through the prompts\n    await clickOnButton(popup, 'Next');\n    await clickOnButton(popup, 'Connect');\n\n    // Wait and close\n    await waitForChromeState(page);\n    // await popup.close();\n  });\n};\n","import { Page } from 'playwright-core';\nimport { clickOnButton, clickOnElement, waitForChromeState } from '../../../helpers';\nimport { openProfileDropdown } from './helpers';\n\nexport const createAccount = (page: Page) => async (): Promise<void> => {\n  await page.bringToFront();\n  await openProfileDropdown(page);\n\n  // TODO: use different approach? maybe change param to account name\n  await clickOnElement(page, `Create account`);\n  await clickOnButton(page, `Create`);\n  await waitForChromeState(page);\n};\n","import { Page } from 'playwright-core';\nimport { clickOnButton, waitForChromeState } from '../../../helpers';\nimport { performPopupAction } from './util';\n\nexport const allowNetworkSwitch = (page: Page) => async (): Promise<void> => {\n  await performPopupAction(page, async (popup) => {\n    await clickOnButton(popup, 'Switch network');\n    await waitForChromeState(page);\n  });\n};\n","import { Page } from 'playwright-core';\n\nimport { TransactionOptions } from '../../..';\nimport { performPopupAction } from './util';\n\nexport const confirmTransaction =\n  (page: Page) =>\n  async (options?: TransactionOptions): Promise<void> => {\n    await performPopupAction(page, async (popup) => {\n      if (options) {\n        await popup.getByTestId('edit-gas-fee-button').click();\n        await popup.getByTestId('edit-gas-fee-item-custom').click();\n\n        if (options.gas) {\n          await popup.getByTestId('base-fee-input').fill(String(options.gas));\n        }\n\n        if (options.priority) {\n          await popup.getByTestId('priority-fee-input').fill(String(options.priority));\n        }\n\n        if (options.gasLimit) {\n          await popup.getByTestId('advanced-gas-fee-edit').click();\n          await popup.getByTestId('gas-limit-input').fill(String(options.gasLimit));\n        }\n\n        await popup.getByRole('button', { name: 'Save' }).click();\n      }\n\n      await popup.getByTestId('page-container-footer-next').click();\n    });\n  };\n","import { Page } from 'playwright-core';\n\nimport { clickOnButton, clickOnElement, waitForChromeState } from '../../../helpers';\nimport { openAccountDropdown } from './helpers';\nimport { switchAccount } from './switchAccount';\n\nexport const deleteAccount =\n  (page: Page) =>\n  async (accountNumber: number): Promise<void> => {\n    await page.bringToFront();\n\n    if (accountNumber === 1) throw new SyntaxError('Account 1 cannot be deleted');\n    await switchAccount(page)(accountNumber);\n\n    await openAccountDropdown(page);\n    await clickOnElement(page, 'Remove account');\n    await clickOnButton(page, 'Remove');\n    await waitForChromeState(page);\n  };\n","import { Page } from 'playwright-core';\nimport { clickOnButton, getElementByContent } from '../../../helpers';\nimport { clickOnLogo, openNetworkDropdown } from './helpers';\n\nexport const deleteNetwork =\n  (page: Page) =>\n  async (name: string): Promise<void> => {\n    await page.bringToFront();\n\n    await openNetworkDropdown(page);\n    const network = await getElementByContent(page, name);\n    await network.hover();\n\n    const deleteButton = await page.waitForSelector(`//*[contains(text(), '${name}')]/following-sibling::i`);\n    await deleteButton.click();\n\n    await clickOnButton(page, 'Delete');\n    await clickOnLogo(page);\n  };\n","import { Page } from 'playwright-core';\n\nexport const getTokenBalance =\n  (page: Page) =>\n  async (tokenSymbol: string): Promise<number> => {\n    await page.bringToFront();\n    await page.waitForTimeout(1000);\n\n    const assetListItems = await page.$$('.asset-list-item__token-button');\n\n    for (let index = 0; index < assetListItems.length; index++) {\n      const assetListItem = assetListItems[index];\n\n      const titleAttributeValue: string = await page.evaluate((item) => item.getAttribute('title'), assetListItem);\n\n      if (titleAttributeValue.split(' ')[1].toUpperCase() === tokenSymbol.toUpperCase()) {\n        const balance = titleAttributeValue.split(' ')[0];\n        return parseFloat(balance);\n      }\n    }\n\n    return 0;\n  };\n","import { Page } from 'playwright-core';\nimport { openNetworkDropdown } from './helpers';\n\nexport const hasNetwork =\n  (page: Page) =>\n  async (name: string): Promise<boolean> => {\n    await page.bringToFront();\n    await openNetworkDropdown(page);\n    const isNetworkListed = await page.isVisible(\n      `//div[@class=\"network-dropdown-list\"]/li[contains(string(), \"${name}\")]`,\n    );\n    (await page.waitForSelector('.network-display')).click();\n    return isNetworkListed;\n  };\n","import { Page } from 'playwright-core';\n\nimport { clickOnButton, clickOnElement, typeOnInputField } from '../../../helpers';\nimport { getErrorMessage, openProfileDropdown } from './helpers';\n\nexport const importPk =\n  (page: Page) =>\n  async (privateKey: string): Promise<void> => {\n    await page.bringToFront();\n    await openProfileDropdown(page);\n\n    await clickOnElement(page, 'Import account');\n    await typeOnInputField(page, 'your private key', privateKey);\n    await clickOnButton(page, 'Import');\n\n    const errorMessage = await getErrorMessage(page);\n    if (errorMessage) throw new SyntaxError(errorMessage);\n  };\n","import { Page } from 'playwright-core';\n\nimport { clickOnButton } from '../../../helpers';\nimport { openProfileDropdown } from './helpers';\n\nexport const lock = (page: Page) => async (): Promise<void> => {\n  await page.bringToFront();\n\n  await openProfileDropdown(page);\n  await clickOnButton(page, 'Lock');\n};\n","import { Page } from 'playwright-core';\n\nimport { clickOnButton } from '../../../helpers';\n\nimport { performPopupAction } from './util';\n\nexport const sign = (page: Page) => async (): Promise<void> => {\n  await performPopupAction(page, async (popup) => {\n    console.log(popup.url())\n    await popup.bringToFront();\n    await popup.reload();\n    await popup.waitForSelector(\"div\")\n    let selector = await popup.locator(\".signature-request-message__scroll-button\");\n    let count = await selector.count();\n    if(await selector.count() >=1){\n      await popup.click(\".signature-request-message__scroll-button\");\n    }\n    await clickOnButton(popup, 'Sign');\n  });\n};\n","import { Page } from 'playwright-core';\nimport { openNetworkDropdown } from './helpers';\n\nexport const switchNetwork =\n  (page: Page) =>\n  async (network = 'main'): Promise<void> => {\n    await page.bringToFront();\n    await openNetworkDropdown(page);\n    await page.waitForSelector(':nth-match(li.dropdown-menu-item, 2)');\n\n    const networkIndex = await page.evaluate((network) => {\n      const elements = document.querySelectorAll('li.dropdown-menu-item');\n      for (let i = 0; i < elements.length; i++) {\n        const element = elements[i];\n        if ((element as HTMLLIElement).innerText.toLowerCase().includes(network.toLowerCase())) {\n          return i;\n        }\n      }\n      return 0;\n    }, network);\n\n    const networkFullName = await page.evaluate((index) => {\n      const elements = document.querySelectorAll(`li.dropdown-menu-item > span`);\n      return (elements[index] as HTMLLIElement).innerText;\n    }, networkIndex);\n\n    const networkButton = (await page.$$('li.dropdown-menu-item'))[networkIndex];\n    await networkButton.click();\n\n    await page.waitForSelector(`//*[text() = '${networkFullName}']`);\n  };\n","import { Page } from 'playwright-core';\nimport { closePopup } from '../setup/setupActions';\n\nexport const unlock =\n  (page: Page) =>\n  async (password = 'password1234'): Promise<void> => {\n    await page.bringToFront();\n\n    await page.getByTestId('unlock-password').fill(password);\n    await page.getByTestId('unlock-submit').click();\n\n    await closePopup(page);\n  };\n","import { BrowserContext, Page } from 'playwright-core';\nimport { CoinbaseWallet } from './coinbase/coinbase';\nimport { MetaMaskWallet } from './metamask/metamask';\nimport { EXTENSION_ID } from './metamask/setup/downloader';\n\nexport type Step<Options> = (page: Page, options?: Options) => void;\nexport type WalletIdOptions = 'metamask' | 'coinbase';\nexport type WalletTypes = typeof CoinbaseWallet | typeof MetaMaskWallet;\nexport type WalletOptions = {\n  seed?: string;\n  password?: string;\n  showTestNets?: boolean;\n};\n\nexport const WALLETS: WalletTypes[] = [CoinbaseWallet, MetaMaskWallet];\n\nexport const getWalletType = (id: WalletIdOptions): WalletTypes => {\n  const walletType = WALLETS.find((wallet) => {\n    return wallet.id === id;\n  });\n\n  if (!walletType) throw new Error(`Wallet ${id} not supported`);\n\n  return walletType;\n};\n\nexport const getWallet = async (id: WalletIdOptions, browserContext: BrowserContext): Promise<MetaMaskWallet> => {\n  const wallet = getWalletType(id);\n\n  if (browserContext.pages().length === 1) {\n    let page: Page;\n    try {\n      // Wait for the wallet to pop up\n      page = await browserContext.waitForEvent('page', { timeout: 2000 });\n      return new wallet(page);\n    } catch {\n      // Open the wallet manually if tab doesn't pop up\n      page = await browserContext.newPage();\n      await page.goto(`chrome-extension://${EXTENSION_ID}${wallet.homePath}`);\n    }\n\n    return new wallet(page);\n  }\n\n  const page = browserContext.pages()[1];\n  return new wallet(page);\n};\n","import os from 'os';\nimport * as path from 'path';\nimport playwright from 'playwright-core';\n\nimport { DappwrightLaunchResponse, OfficialOptions } from './types';\nimport { getWallet, getWalletType } from './wallets/wallets';\n\n/**\n * Launch Playwright chromium instance with wallet plugin installed\n * */\nexport const sessionPath = path.resolve(os.tmpdir(), 'dappwright', 'session');\n\nexport async function launch(browserName: string, options: OfficialOptions): Promise<DappwrightLaunchResponse> {\n  const { headless,viewport, ...officialOptions } = options;\n  console.log(viewport);\n  const wallet = getWalletType(officialOptions.wallet);\n  if (!wallet) throw new Error('Wallet not supported');\n\n  const extensionPath = await wallet.download(officialOptions);\n\n  const browserContext = await playwright.chromium.launchPersistentContext(\n    path.join(sessionPath, officialOptions.wallet),\n    {\n      headless: headless ?? false,\n      viewport : viewport?? {width:1280,height:720},\n      args: [`--disable-extensions-except=${extensionPath}`, `--load-extension=${extensionPath}`, `--start-maximized`],\n    },\n  );\n\n  return {\n    wallet: await getWallet(wallet.id, browserContext),\n    browserContext,\n  };\n}\n","import fs from 'fs';\nimport * as path from 'path';\nimport { BrowserContext, Page } from 'playwright-core';\nimport { launch, sessionPath } from './launch';\nimport { Dappwright, OfficialOptions } from './types';\nimport { getWallet, WalletOptions } from './wallets/wallets';\n\nexport const bootstrap = async (\n  browserName: string,\n  { seed, password, showTestNets, ...launchOptions }: OfficialOptions & WalletOptions,\n): Promise<[Dappwright, Page, BrowserContext]> => {\n  if (fs.existsSync(path.join(sessionPath, launchOptions.wallet))) {\n  fs.rmdirSync(path.join(sessionPath, launchOptions.wallet), { recursive: true });\n  }\n  const { browserContext } = await launch(browserName, launchOptions);\n  try{\n    const wallet = await getWallet(launchOptions.wallet, browserContext);\n    await wallet.setup({ seed, password, showTestNets });  \n    return [wallet, wallet.page, browserContext];\n  } catch (e){\n    await browserContext.close();\n    throw e;\n  }\n\n};\n"],"names":["setup","page","defaultMetamaskSteps","async","options","steps","step","isNewerVersion","current","comparingWith","currentFragments","replace","split","comparingWithFragments","length","i","Number","EXTENSION_ID","isEmpty","path","fs","readdirSync","withFileTypes","filter","item","isFile","name","startsWith","downloader","walletId","releasesUrl","recommendedVersion","EXTENSION_PATH","version","console","log","warn","download","downloadDir","resolve","os","tmpdir","location","extractDestination","existsSync","filename","downloadUrl","getGithubRelease","rmdirSync","recursive","downloadedFile","downloadGithubRelease","zip","StreamZip","file","mkdirSync","extract","manifestPath","manifest","JSON","parse","readFileSync","key","writeFileSync","stringify","url","Promise","fileLocation","join","createWriteStream","stream","get","response","statusCode","headers","on","error","message","request","pipe","reject","process","env","GITHUB_TOKEN","body","chunk","data","result","draft","includes","tag_name","asset","assets","browser_download_url","tag","Wallet","constructor","this","static","waitForChromeState","waitForTimeout","clickOnElement","text","type","element","getElementByContent","click","clickOnButton","button","typeOnInputField","label","clear","excludeSpan","optional","input","getInputByLabel","e","evaluate","node","value","waitForSelector","timeout","clickOnSettingsSwitch","getSettingsSwitch","openNetworkDropdown","networkSwitcher","openProfileDropdown","accountSwitcher","noWaitAfter","force","clickOnLogo","header","getErrorMessage","errorElement","race","catch","innerText","performPopupAction","action","popup","context","waitForEvent","pages","p","Error","isClosed","switchAccount","accountNumber","bringToFront","showTestNets","metamaskPage","importAccount","seed","getByTestId","index","seedPart","entries","createPassword","password","fill","clearOnboardingHelp","closePopup","setTimeout","locator","isVisible","$eval","goHome","navigateHome","goto","getStarted","check","deleteAccount","_i","addToken","_","importPK","switchNetwork","confirmNetworkSwitch","CoinbaseWallet","id","defaultSetupSteps","addNetwork","settingsPage","newPage","errorNode","networkName","rpc","chainId","toString","symbol","errorMessage","textContent","close","SyntaxError","reload","approve","createAccount","confirmTransaction","deleteNetwork","getTokenBalance","tokenSymbol","readAttempts","readAttempt","currencyAmount","replaceAll","hasNetwork","networkIsListed","lock","sign","unlock","MetaMaskWallet","getByRole","getByLabel","String","tokenAddress","decimals","decimalsInput","isDisabled","waitForLoadState","first","gas","priority","gasLimit","accMenu","getAccountMenuButton","openAccountDropdown","network","hover","deleteButton","assetListItems","$$","assetListItem","titleAttributeValue","getAttribute","toUpperCase","balance","parseFloat","isNetworkListed","privateKey","importPk","selector","count","networkIndex","elements","document","querySelectorAll","toLowerCase","networkFullName","networkButton","WALLETS","getWalletType","walletType","find","wallet","getWallet","browserContext","homePath","sessionPath","launch","browserName","headless","viewport","officialOptions","extensionPath","playwright","chromium","launchPersistentContext","width","height","args","launchOptions"],"mappings":"ymBAOa,MAAAA,EACX,CAACC,EAAYC,IACbC,MAAgCC,EAAmBC,EAAyBH,KAE1E,IAAK,MAAMI,KAAQD,QACXC,EAAKL,EAAMG,EAClB,ECbQG,EAAiB,CAACC,EAAiBC,KAC9C,GAAID,IAAYC,EAAe,OAAO,EAEtC,MAAMC,EAAmBF,EAAQG,QAAQ,WAAY,IAAIC,MAAM,KACzDC,EAAyBJ,EAAcE,QAAQ,WAAY,IAAIC,MAAM,KAErEE,EACJJ,EAAiBI,OAASD,EAAuBC,OAASJ,EAAiBI,OAASD,EAAuBC,OAC7G,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQC,IAC1B,IAAKC,OAAON,EAAiBK,KAAO,MAAQC,OAAOH,EAAuBE,KAAO,GACjF,OAAQC,OAAOH,EAAuBE,KAAO,IAAMC,OAAON,EAAiBK,KAAO,GAEpF,OAAO,CAAI,ECDAE,EAAe,mCAWtBC,EAAWC,GAGS,IAFVC,EAAGC,YAAYF,EAAM,CAAEG,eAAe,IAChCC,OAAQC,GAASA,EAAKC,WAAaD,EAAKE,KAAKC,WAAW,MAC/Db,OAGf,IAAec,EAAA,CAACC,EAA2BC,EAAqBC,IAC9D5B,MAAOC,IAEL,IAAI4B,EAEJ,MAAMC,QAAEA,GAAY7B,EA+BpB,OA7BI6B,GAEFC,QAAQC,IAAI,IACI,WAAZF,EACFC,QAAQE,KACN,cACA,gCAAgCP,uFAA8FE,OAEzHxB,EAAewB,EAAoBE,GAC1CC,QAAQE,KACN,cACA,0CAA0CH,SAAeJ,gHACAE,OAEpDxB,EAAe0B,EAASF,GAC/BG,QAAQE,KACN,cACA,2CAA2CH,SAAeJ,6GACJE,OAErDG,QAAQC,IAAI,oBAAoBN,aAAoBI,KAEzDC,QAAQC,IAAI,IAEZH,QAAuBK,EAASJ,EAASH,EAAaQ,EAAYT,KAElEK,QAAQC,IAAI,0BAA0BN,WAGjCG,CAAc,EAGlB,MAAMM,EAAeT,GACnBV,EAAKoB,QAAQC,EAAGC,SAAU,aAAcZ,GAG3CQ,EAAWlC,MAAO8B,EAAiBH,EAAqBY,KAC5D,MAAMC,EAAqBxB,EAAKoB,QAAQG,EAAUT,EAAQtB,QAAQ,MAAO,MAEzE,GAAgB,WAAZsB,GACEb,EAAGwB,WAAWD,KAAwBzB,EAAQyB,GAAqB,OAAOA,EAIhFT,QAAQC,IAAI,4BAEZ,MAAMU,SAAEA,EAAQC,YAAEA,SAAsBC,EAAiBjB,EAAa,IAAIG,KAO1E,GAJIb,EAAGwB,WAAWD,IAAuBzB,EAAQyB,IAC/CvB,EAAG4B,UAAUL,EAAoB,CAAEM,WAAW,KAG3C7B,EAAGwB,WAAWD,IAAuBzB,EAAQyB,GAAqB,CACrE,MAAMO,QAAuBC,EAAsBN,EAAUC,EAAaJ,GACpEU,EAAM,IAAIC,UAAUlD,MAAM,CAAEmD,KAAMJ,IACxC9B,EAAGmC,UAAUZ,SACPS,EAAII,QAAQ,KAAMb,GAGxB,MAAMc,EAAetC,EAAKoB,QAAQI,EAAoB,iBAChDe,EAAWC,KAAKC,MAAMxC,EAAGyC,aAAaJ,EAAc,UAC1DC,EAASI,IApFX,2YAqFE1C,EAAG2C,cAAcN,EAAcE,KAAKK,UAAUN,GAC/C,CACD,OAAOf,CAAkB,EAyBrBQ,EAAwB,CAACzB,EAAcuC,EAAavB,IAExD,IAAIwB,QAAQ/D,MAAOoC,IACZnB,EAAGwB,WAAWF,IACjBtB,EAAGmC,UAAUb,EAAU,CAAEO,WAAW,IAEtC,MAAMkB,EAAehD,EAAKiD,KAAK1B,EAAUhB,GACnC4B,EAAOlC,EAAGiD,kBAAkBF,GAC5BG,OA7BM,CAACL,GACf,IAAIC,QAAS3B,IACKgC,EAAAA,IAAIN,EAAMO,IACG,KAAvBA,EAASC,WACaF,EAAAA,IAAIC,EAASE,QAAQhC,SAAUH,GACvCoC,GAAG,QAAUC,IAG3B,MADA1C,QAAQE,KAAK,4BAA6BwC,EAAMC,SAC1CD,CAAK,GAGbrC,EAAQiC,EACT,GAEKG,GAAG,QAAUC,IAGnB,MADA1C,QAAQE,KAAK,iBAAkBwC,EAAMC,SAC/BD,CAAK,EACX,GAWmBE,CAAQb,GAC7BK,EAAOS,KAAKzB,GACZgB,EAAOK,GAAG,MAAO,KACfpC,EAAQ4B,EAAa,EACrB,GAIApB,EAAmB,CAACjB,EAAqBG,IAC7C,IAAIiC,QAAQ,CAAC3B,EAASyC,KAEpB,MAAM5E,EAAU,CAAEsE,QAAS,CAAE,aAAc,gBACvCO,QAAQC,IAAIC,eAAc/E,EAAQsE,QAAuB,cAAI,UAAUO,QAAQC,IAAIC,gBACvEZ,EAAGA,IAACzC,EAAa1B,EAAUoE,IACzC,IAAIY,EAAO,GACXZ,EAASG,GAAG,OAASU,IACnBD,GAAQC,CAAK,GAGfb,EAASG,GAAG,MAAO,KACjB,MAAMW,EAAO3B,KAAKC,MAAMwB,GACxB,GAAIE,EAAKT,QAAS,OAAOG,EAAOM,EAAKT,SACrC,IAAK,MAAMU,KAAUD,EACnB,IAAIC,EAAOC,QACK,WAAZvD,GAAwBsD,EAAO7D,KAAK+D,SAASxD,IAAYsD,EAAOG,SAASD,SAASxD,IACpF,IAAK,MAAM0D,KAASJ,EAAOK,OACrBD,EAAMjE,KAAK+D,SAAS,WACtBlD,EAAQ,CACNO,YAAa6C,EAAME,qBACnBhD,SAAU8C,EAAMjE,KAChBoE,IAAKP,EAAOG,WAKtBV,EAAO,WAAW/C,eAAqB,EACvC,GAEI0C,GAAG,QAAUC,IAGnB,MADA1C,QAAQE,KAAK,0BAA2BwC,EAAMC,SACxCD,CAAK,EACX,GC3KQ,MAAgBmB,EAC5B9D,QACAhC,KAEA+F,YAAY/F,GACVgG,KAAKhG,KAAOA,CACb,CAGDiG,UACAA,0BACAA,mBACAA,gBAGAA,gBChBK,MAAMC,EAAqBhG,MAAOF,UACjCA,EAAKmG,eAAe,IAAK,EAGpBC,EAAiBlG,MAAOF,EAAYqG,EAAcC,KAC7D,MAAMC,QAAgBC,EAAoBxG,EAAMqG,EAAMC,SAChDC,EAAQE,OAAO,EAGVC,EAAgBxG,MAAOF,EAAYqG,KAC9C,MAAMM,QAAeH,EAAoBxG,EAAMqG,EAAM,gBAC/CM,EAAOF,OAAO,EAaTG,EAAmB1G,MAC9BF,EACA6G,EACAR,EACAS,GAAQ,EACRC,GAAc,EACdC,GAAW,KAEX,IAAIC,EACJ,IACEA,QAAcC,EAAgBlH,EAAM6G,EAAOE,EAAa,IAIzD,CAHC,MAAOI,GACP,GAAIH,EAAU,OAAO,EACrB,MAAMG,CACP,CAOD,OALIL,SACI9G,EAAKoH,SAAUC,IACnBA,EAAKC,MAAQ,EAAE,EACdL,SACCA,EAAMX,KAAKD,IACV,CAAI,EC9CAG,EAAsB,CAACxG,EAAYqG,EAAcC,EAAO,MACnEtG,EAAKuH,gBAAgB,KAAKjB,uBAA0BD,QAEzCa,EAAkB,CAC7BlH,EACAqG,EACAU,GAAc,EACdS,EAAU,MAEVxH,EAAKuH,gBACH,CACE,uBAAuBlB,mCACvB,uBAAuBA,mCACvB,oBAAoBA,8DACpB,oBAAoBA,oEACfU,EAKD,GAJA,CACE,sBAAsBV,iEACtB,sBAAsBA,qCAG5BlC,KAAK,KACP,CAAEqD,YCrBOC,EAAwBvH,MAAOF,EAAYqG,KACtD,MAAMM,QAAee,EAAkB1H,EAAMqG,SACvCM,EAAOF,OAAO,EAGTkB,EAAsBzH,MAAOF,IACxC,MAAM4H,QAAwB5H,EAAKuH,gBAAgB,0BAC7CK,EAAgBnB,cAChBzG,EAAKuH,gBAAgB,wBAAwB,EAGxCM,EAAsB3H,MAAOF,IACxC,MAAM8H,QAAwB9H,EAAKuH,gBAAgB,6BAC7CO,EAAgBrB,MAAM,CAAEsB,aAAa,EAAMC,OAAO,GAAO,EASpDC,EAAc/H,MAAOF,IAChC,MAAMkI,QAAelI,EAAKuH,gBAAgB,qCACpCW,EAAOzB,OAAO,ECzBTiB,EAAoB,CAAC1H,EAAYqG,IAC5CrG,EAAKuH,gBACH,CACE,sBAAsBlB,sDACtB,sBAAsBA,yDACtBlC,KAAK,MAGEgE,EAAkBjI,MAAOF,IACpC,MAAMG,EAAkD,CAAEqH,QAAS,KAE7DY,QAAqBnE,QAAQoE,KAAK,CACtCrI,EAAKuH,gBAAgB,aAAcpH,GACnCH,EAAKuH,gBAAgB,6BAA8BpH,GACnDH,EAAKuH,gBAAgB,mCAAoCpH,GACzDH,EAAKuH,gBAAgB,4BAA6BpH,KACjDmI,MAAM,IAAM,MACf,QAAKF,GACGA,EAA6BG,SAAS,ECjBnCC,EAAqBtI,MAAOF,EAAYyI,KACnD,IAAIC,EAAQ,KACZ,IACEA,QAAc1I,EAAK2I,UAAUC,aAAa,OAAQ,CAAEpB,QAAS,KAe9D,CAdC,MAAML,GACNlF,QAAQC,IAAIiF,GACZlF,QAAQC,IAAI,uDACZ,IAAI2G,EAAQ7I,EAAK2I,UAAUE,QAC3B,IAAI,IAAI/H,EAAE+H,EAAMhI,OAAO,EAAEC,GAAG,EAAEA,IAAI,CAChC,IAAIgI,EAAID,EAAM/H,GACd,GAAGgI,EAAE9E,MAAMwB,SAASxE,EAAa,sBAAsB,CACrD0H,EAAQI,EACR,KACD,CACF,CACD,IAAIJ,EACF,MAAMK,MAAM,kCAEf,CAGD,SADMN,EAAOC,IACRA,EAAMM,WAET,UACQN,EAAME,aAAa,QAAS,CAAEpB,QAAS,KAG9C,CAFC,MAAML,GACNlF,QAAQC,IAAI,mCACb,CACF,EC1BU+G,EACVjJ,GACDE,MAAOgJ,UACClJ,EAAKmJ,qBACLnJ,EAAKmG,eAAe,WACpB0B,EAAoB7H,SAGpBoG,EAAepG,EAAM,WAAWkJ,IAAgB,ECPnDhJ,eAAekJ,EAAaC,SAC3B1B,EAAoB0B,SAEpBjD,EAAeiD,EAAc,mBAC7B5B,EAAsB4B,EAAc,+BACpC5B,EAAsB4B,EAAc,4BACpCpB,EAAYoB,SACZnD,EAAmBmD,EAC3B,CAsBOnJ,eAAeoJ,EACpBD,GACAE,KAAEA,EAAO,oFAEHF,EAAaG,YAAY,4BAA4B/C,cACrD4C,EAAaG,YAAY,uBAAuB/C,QAEtD,IAAK,MAAOgD,EAAOC,KAAaH,EAAK5I,MAAM,KAAKgJ,gBACxC/C,EAAiByC,EAAc,GAAGI,EAAQ,KAAMC,SAElDL,EAAaG,YAAY,sBAAsB/C,OACvD,CAEOvG,eAAe0J,EAAeP,GAAoBQ,SAAEA,EAAW,uBAC9DR,EAAaG,YAAY,uBAAuBM,KAAKD,SACrDR,EAAaG,YAAY,2BAA2BM,KAAKD,SACzDR,EAAaG,YAAY,yBAAyB/C,cAClD4C,EAAaG,YAAY,0BAA0B/C,OAC3D,CAEOvG,eAAe6J,EAAoBV,SAClCA,EAAaG,YAAY,4BAA4B/C,cACrD4C,EAAaG,YAAY,sBAAsB/C,cAC/C4C,EAAaG,YAAY,sBAAsB/C,OACvD,CAEO,MAAMuD,EAAa9J,MAAOF,UAGzB,IAAIiE,QAAS3B,GAAY2H,WAAW3H,EAAS,YACzCtC,EAAKkK,QAAQ,2BAA2BC,mBAC1CnK,EAAKoK,MAAM,0BAA4B/C,GAAsBA,EAAKZ,QACzE,EC9DG4D,EAASnK,MAAOF,UACdA,EAAKwJ,YAAY,6BAA6B/C,OAAO,EAGhD6D,EAAepK,MAAOF,UAC3BA,EAAKuK,KAAKvK,EAAKgE,MAAMrD,MAAM,KAAK,GAAG,EAGpCT,eAAesK,EACpBxK,GACAuJ,KACEA,EAAO,4EAA2EM,SAClFA,EAAW,2BAIP7J,EAAKwJ,YAAY,8BAA8B/C,cAG/CzG,EAAKwJ,YAAY,8BAA8B/C,cAC/CzG,EAAKwJ,YAAY,qBAAqBM,KAAKP,SAC3CvJ,EAAKwJ,YAAY,qBAAqB/C,cACtCzG,EAAKwJ,YAAY,eAAeM,KAAKD,SACrC7J,EAAKwJ,YAAY,qBAAqBM,KAAKD,SAC3C7J,EAAKwJ,YAAY,4BAA4BiB,cAC7CzK,EAAKwJ,YAAY,yBAAyB/C,cAG1CP,EAAmBlG,EAC3B,CAEO,MA8KM0K,EAAgBxK,MAAOyK,IAElC1I,QAAQE,KAAK,uGAAuG,EAGzGyI,EAAW1K,MAAO2K,IAE7B5I,QAAQE,KAAK,4EAA4E,EAG9E2I,EAAW5K,MAAO2K,IAE7B5I,QAAQE,KAAK,uFAAuF,EAGzF4I,EAAgB7K,MAAO2K,IAElC5I,QAAQE,KAAK,gCAAgC,EAIlC6I,EAAuB9K,UAElC+B,QAAQE,KAAK,sCAAsC,ECjN/C,MAAO8I,UAAuBnF,EAClCG,UAAY,WACZA,0BAA4B,QAC5BA,mBAAqB,2EACrBA,gBAAkB,cAElB9F,QAGA8F,gBAAkBtE,EAAWqE,KAAKkF,GAAIlF,KAAKnE,YAAamE,KAAKlE,oBAG7DqJ,kBAA2C,CAACX,EAAYF,GACxDvK,MAAQA,EAAMiG,KAAKhG,KAAMgG,KAAKmF,mBAG9BC,WDwCA,CAACpL,GACDE,MAAOC,IAEL,MAAMkL,QAAqBrL,EAAK2I,UAAU2C,UAS1C,IAAIC,QAREF,EAAad,KAAK,GAAGvK,EAAKgE,iEAC1BqH,EAAa7B,YAAY,6BAA6BM,KAAK3J,EAAQqL,mBACnEH,EAAa7B,YAAY,gCAAgCM,KAAK3J,EAAQsL,WACtEJ,EAAa7B,YAAY,iCAAiCM,KAAK3J,EAAQuL,QAAQC,kBAC/EN,EAAa7B,YAAY,wCAAwCM,KAAK3J,EAAQyL,cAC9EP,EAAa7B,YAAY,uBAAuB/C,QAItD,IACE8E,QAAkBF,EAAa9D,gBAAgB,gDAAiD,CAC9FC,QAAS,IAIZ,CAFC,MAED,CAED,GAAI+D,EAAW,CACb,MAAMM,QAAqBN,EAAUO,cAErC,YADMT,EAAaU,QACb,IAAIC,YAAYH,EACvB,OAEKR,EAAazC,aAAa,eAG1B5I,EAAKmJ,qBACLnJ,EAAKiM,QAAQ,ECvERb,CAAWpF,KAAKhG,MAC7B4K,SAAWA,EACXsB,QDNqB,CAAClM,GAAeE,gBAC/BsI,EAAmBxI,EAAME,MAAOwI,UAC9BA,EAAMc,YAAY,0BAA0B/C,OAAO,EACzD,ECGQyF,CAAQlG,KAAKhG,MACvBmM,cD2I2B,CAACnM,GAAeE,gBACrCF,EAAKwJ,YAAY,6CAA6C/C,cAC9DzG,EAAKwJ,YAAY,2BAA2B/C,cAC5CzG,EAAKwJ,YAAY,sDAAsD/C,QAG7E,UACQzG,EAAKwJ,YAAY,4BAA4B/C,OAGpD,CAFC,MAED,OAEKP,EAAmBlG,EAAK,ECvJdmM,CAAcnG,KAAKhG,MACnCgL,qBAAuBA,EACvBoB,mBDqBgC,CAACpM,GAAeE,gBAC1CsI,EAAmBxI,EAAME,MAAOwI,IACpC,gBAEeA,EAAMnB,gBAAgB,gBAAiB,CAAEC,QAAS,OAASf,OAGzE,CAFC,MAED,OAEKiC,EAAMc,YAAY,0BAA0B/C,OAAO,EACzD,EC/BmB2F,CAAmBpG,KAAKhG,MAC7C0K,cAAgBA,EAChB2B,cDoEA,CAACrM,GACDE,MAAOuB,UACCzB,EAAKwJ,YAAY,4BAA4B/C,cAC7CzG,EAAKwJ,YAAY,yCAAyC/C,cAG1DzG,EAAKwJ,YAAY,uBAAuBM,KAAKrI,eACtCzB,EAAKuH,gBAAgB,2CAA2Cd,cAEvEzG,EAAKwJ,YAAY,yBAAyB/C,cAC1C4D,EAAOrK,EAAK,EC9EJqM,CAAcrG,KAAKhG,MACnCsM,gBD4FA,CAACtM,GACDE,MAAOqM,IACL,MAqBMC,EAAe,CArBKtM,gBAClBF,EAAKmJ,qBACLnJ,EAAKwJ,YAAY,2CAA2C/C,cACrDzG,EAAKuH,gBAChB,0EAA0EgF,OAC1E,CACE/E,QAAS,OAKYtH,gBACnBF,EAAKwJ,YAAY,4CAA4C/C,cACtDzG,EAAKuH,gBAChB,0EAA0EgF,OAC1E,CACE/E,QAAS,QAOf,IAAIb,EACJ,IAAK,MAAM8F,KAAeD,EACxB,IACE7F,QAAe8F,GAGhB,CAFC,MAED,CAGH,IAAK9F,EAAQ,OAAO,EAEpB,MACM+F,SADa/F,EAAOmF,eACEa,WAAW,OAAQ,IAAIhM,MAAM4L,GAAa,GAEtE,OAAOG,EAAiB3L,OAAO2L,GAAkB,CAAC,ECnIlCJ,CAAgBtG,KAAKhG,MACvC4M,WDgFA,CAAC5M,GACDE,MAAOuB,UACCzB,EAAKwJ,YAAY,4BAA4B/C,cAC7CzG,EAAKwJ,YAAY,yCAAyC/C,cAC1DzG,EAAKwJ,YAAY,uBAAuBM,KAAKrI,GACnD,MAAMoL,QAAwB7M,EAAKmK,UAAU,0CAE7C,aADME,EAAOrK,GACN6M,CAAe,ECvFXD,CAAW5G,KAAKhG,MAC7B8K,SAAWA,EACXgC,KDHkB,CAAC9M,GAAeE,gBAC5BF,EAAKwJ,YAAY,4BAA4B/C,cAC7CzG,EAAKwJ,YAAY,sBAAsB/C,OAAO,ECC7CqG,CAAK9G,KAAKhG,MACjB+M,KDVkB,CAAC/M,GAAeE,gBAC5BsI,EAAmBxI,EAAME,MAAOwI,UAC9BA,EAAMc,YAAY,gBAAgB/C,OAAO,EAC/C,ECOKsG,CAAK/G,KAAKhG,MACjBiJ,cDiJA,CAACjJ,GACDE,MAAOY,UACCd,EAAKwJ,YAAY,6CAA6C/C,oBAE5DzG,EAAKuH,gBAAgB,0EAA0EzG,OACrG2F,OAAO,ECtJKwC,CAAcjD,KAAKhG,MACnC+K,cAAgBA,EAChBiC,ODDA,CAAChN,GACDE,MAAO2J,EAAW,4BACV7J,EAAKwJ,YAAY,wBAAwBM,KAAKD,SAC9C7J,EAAKwJ,YAAY,wBAAwB/C,cAGzC4D,EAAOrK,SAGPA,EAAKuH,gBAAgB,oDAAqD,CAAEC,QAAS,KAAQ,ECR5FwF,CAAOhH,KAAKhG,MChCjB,MAAOiN,UAAuBnH,EAClCG,UAAY,WACZA,0BAA4B,UAC5BA,mBAAqB,oEACrBA,gBAAkB,aAElB9F,QAGA8F,gBAAkBtE,EAAWqE,KAAKkF,GAAIlF,KAAKnE,YAAamE,KAAKlE,oBAG7DqJ,kBAA2C,CACzC7B,EACAM,EACAG,EACAC,EACAZ,GAEFrJ,MAAQA,EAAMiG,KAAKhG,KAAMgG,KAAKmF,mBAG9BC,WCvCA,CAACpL,GACDE,OAASsL,cAAaC,MAAKC,UAASE,mBAC5B5L,EAAKmJ,qBACLxB,EAAoB3H,SACpB0G,EAAc1G,EAAM,qBAEpBA,EAAKwJ,YAAY,mBAAmB/C,cACpCzG,EAAKkN,UAAU,SAAU,CAAEzL,KAAM,gBAAiBgF,cAClDzG,EAAKwJ,YAAY,wBAAwB/C,cACzCzG,EAAKmN,WAAW,gBAAgBrD,KAAK0B,SACrCxL,EAAKmN,WAAW,eAAerD,KAAK2B,SACpCzL,EAAKmN,WAAW,YAAYrD,KAAKsD,OAAO1B,UACxC1L,EAAKmN,WAAW,mBAAmBrD,KAAK8B,GAE9C,MAAMC,QAAqB1D,EAAgBnI,GAC3C,GAAI6L,EAEF,YADM5D,EAAYjI,GACZ,IAAIgM,YAAYH,SAGlBnF,EAAc1G,EAAM,cAEpBA,EAAKuH,gBAAgB,iBAAiBiE,aAEXxL,EAAKmK,UAAU,+CAClBzD,EAAc1G,EAAM,SAAS,EDchDoL,CAAWpF,KAAKhG,MAC7B4K,SE1CA,CAAC5K,GACDE,OAASmN,eAAczB,SAAQ0B,WAAW,YAClCtN,EAAKmJ,qBAEL/C,EAAepG,EAAM,uBACrBA,EAAKmG,eAAe,WACpBO,EAAc1G,EAAM,sBACpB4G,EAAiB5G,EAAM,yBAA0BqN,GAKnDzB,SACIhF,EAAiB5G,EAAM,eAAgB4L,GAAQ,GAGvD,MAAM2B,QAAsBrG,EAAgBlH,EAAM,uBACtCuN,EAAcC,oBAAqBD,EAAcjH,KAAK8G,OAAOE,UAEnE5G,EAAc1G,EAAM,0BACpB0G,EAAc1G,EAAM,gBAAgB,EFsBjC4K,CAAS5E,KAAKhG,MACzBkM,QG3CqB,CAAClM,GAAeE,gBAC/BsI,EAAmBxI,EAAME,MAAOwI,UAE9BA,EAAM+E,yBACN/E,EAAMS,qBAGNT,EAAMwB,QAAQ,0BAA0BwD,QAAQjD,cAGhD/D,EAAcgC,EAAO,cACrBhC,EAAcgC,EAAO,iBAGrBxC,EAAmBlG,EAAK,EAE9B,EH2BQkM,CAAQlG,KAAKhG,MACvBmM,cI7C2B,CAACnM,GAAeE,gBACrCF,EAAKmJ,qBACLtB,EAAoB7H,SAGpBoG,EAAepG,EAAM,wBACrB0G,EAAc1G,EAAM,gBACpBkG,EAAmBlG,EAAK,EJsCdmM,CAAcnG,KAAKhG,MACnCgL,qBK9CgC,CAAChL,GAAeE,gBAC1CsI,EAAmBxI,EAAME,MAAOwI,UAC9BhC,EAAcgC,EAAO,wBACrBxC,EAAmBlG,EAAK,EAC9B,EL0CqBgL,CAAqBhF,KAAKhG,MACjDoM,mBM7CA,CAACpM,GACDE,MAAOC,UACCqI,EAAmBxI,EAAME,MAAOwI,IAChCvI,UACIuI,EAAMc,YAAY,uBAAuB/C,cACzCiC,EAAMc,YAAY,4BAA4B/C,QAEhDtG,EAAQwN,WACJjF,EAAMc,YAAY,kBAAkBM,KAAKsD,OAAOjN,EAAQwN,MAG5DxN,EAAQyN,gBACJlF,EAAMc,YAAY,sBAAsBM,KAAKsD,OAAOjN,EAAQyN,WAGhEzN,EAAQ0N,iBACJnF,EAAMc,YAAY,yBAAyB/C,cAC3CiC,EAAMc,YAAY,mBAAmBM,KAAKsD,OAAOjN,EAAQ0N,kBAG3DnF,EAAMwE,UAAU,SAAU,CAAEzL,KAAM,SAAUgF,eAG9CiC,EAAMc,YAAY,8BAA8B/C,OAAO,EAC7D,ENqBiB2F,CAAmBpG,KAAKhG,MAC7C0K,cO7CA,CAAC1K,GACDE,MAAOgJ,IAGL,SAFMlJ,EAAKmJ,eAEW,IAAlBD,EAAqB,MAAM,IAAI8C,YAAY,qCACzC/C,EAAcjJ,EAAdiJ,CAAoBC,QdOKhJ,OAAOF,IACxC,MAAM8N,OCG4B,CAAC9N,GACnCA,EAAKuH,gBAAgB,oCDJCwG,CAAqB/N,SACrC8N,EAAQrH,cACRzG,EAAKuH,gBAAgB,wCAAwC,EcR3DyG,CAAoBhO,SACpBoG,EAAepG,EAAM,wBACrB0G,EAAc1G,EAAM,gBACpBkG,EAAmBlG,EAAK,EPmChB0K,CAAc1E,KAAKhG,MACnCqM,cQhDA,CAACrM,GACDE,MAAOuB,UACCzB,EAAKmJ,qBAELxB,EAAoB3H,GAC1B,MAAMiO,QAAgBzH,EAAoBxG,EAAMyB,SAC1CwM,EAAQC,QAEd,MAAMC,QAAqBnO,EAAKuH,gBAAgB,yBAAyB9F,mCACnE0M,EAAa1H,cAEbC,EAAc1G,EAAM,gBACpBiI,EAAYjI,EAAK,ERoCTqM,CAAcrG,KAAKhG,MACnCsM,gBSnDA,CAACtM,GACDE,MAAOqM,UACCvM,EAAKmJ,qBACLnJ,EAAKmG,eAAe,KAE1B,MAAMiI,QAAuBpO,EAAKqO,GAAG,kCAErC,IAAK,IAAI5E,EAAQ,EAAGA,EAAQ2E,EAAevN,OAAQ4I,IAAS,CAC1D,MAAM6E,EAAgBF,EAAe3E,GAE/B8E,QAAoCvO,EAAKoH,SAAU7F,GAASA,EAAKiN,aAAa,SAAUF,GAE9F,GAAIC,EAAoB5N,MAAM,KAAK,GAAG8N,gBAAkBlC,EAAYkC,cAAe,CACjF,MAAMC,EAAUH,EAAoB5N,MAAM,KAAK,GAC/C,OAAOgO,WAAWD,EACnB,CACF,CAED,OAAO,CAAC,ETiCQpC,CAAgBtG,KAAKhG,MACvC4M,WUnDA,CAAC5M,GACDE,MAAOuB,UACCzB,EAAKmJ,qBACLxB,EAAoB3H,GAC1B,MAAM4O,QAAwB5O,EAAKmK,UACjC,gEAAgE1I,QAGlE,aADOzB,EAAKuH,gBAAgB,qBAAqBd,QAC1CmI,CAAe,EV2CXhC,CAAW5G,KAAKhG,MAC7B8K,SWlDA,CAAC9K,GACDE,MAAO2O,UACC7O,EAAKmJ,qBACLtB,EAAoB7H,SAEpBoG,EAAepG,EAAM,wBACrB4G,EAAiB5G,EAAM,mBAAoB6O,SAC3CnI,EAAc1G,EAAM,UAE1B,MAAM6L,QAAqB1D,EAAgBnI,GAC3C,GAAI6L,EAAc,MAAM,IAAIG,YAAYH,EAAa,EXwC5CiD,CAAS9I,KAAKhG,MACzB8M,KYpDkB,CAAC9M,GAAeE,gBAC5BF,EAAKmJ,qBAELtB,EAAoB7H,SACpB0G,EAAc1G,EAAM,OAAO,EZgD1B8M,CAAK9G,KAAKhG,MACjB+M,KapDkB,CAAC/M,GAAeE,gBAC5BsI,EAAmBxI,EAAME,MAAOwI,IACpCzG,QAAQC,IAAIwG,EAAM1E,aACZ0E,EAAMS,qBACNT,EAAMuD,eACNvD,EAAMnB,gBAAgB,OAC5B,IAAIwH,QAAiBrG,EAAMwB,QAAQ,mDACjB6E,EAASC,cAClBD,EAASC,SAAU,SACpBtG,EAAMjC,MAAM,mDAEdC,EAAcgC,EAAO,OAAO,EAClC,EbwCKqE,CAAK/G,KAAKhG,MACjBiJ,cAAgBA,EAAcjD,KAAKhG,MACnC+K,ccxDA,CAAC/K,GACDE,MAAO+N,EAAU,gBACTjO,EAAKmJ,qBACLxB,EAAoB3H,SACpBA,EAAKuH,gBAAgB,wCAE3B,MAAM0H,QAAqBjP,EAAKoH,SAAU6G,IACxC,MAAMiB,EAAWC,SAASC,iBAAiB,yBAC3C,IAAK,IAAItO,EAAI,EAAGA,EAAIoO,EAASrO,OAAQC,IAEnC,GADgBoO,EAASpO,GACMyH,UAAU8G,cAAc7J,SAASyI,EAAQoB,eACtE,OAAOvO,EAGX,OAAO,CAAC,EACPmN,GAEGqB,QAAwBtP,EAAKoH,SAAUqC,GAC1B0F,SAASC,iBAAiB,gCAC1B3F,GAAyBlB,UACzC0G,GAEGM,SAAuBvP,EAAKqO,GAAG,0BAA0BY,SACzDM,EAAc9I,cAEdzG,EAAKuH,gBAAgB,iBAAiB+H,MAAoB,Ed+BlDvE,CAAc/E,KAAKhG,MACnCgN,OezDA,CAAChN,GACDE,MAAO2J,EAAW,wBACV7J,EAAKmJ,qBAELnJ,EAAKwJ,YAAY,mBAAmBM,KAAKD,SACzC7J,EAAKwJ,YAAY,iBAAiB/C,cAElCuD,EAAWhK,EAAK,EfkDfgN,CAAOhH,KAAKhG,MgB/ChB,MAAMwP,GAAyB,CAACvE,EAAgBgC,GAE1CwC,GAAiBvE,IAC5B,MAAMwE,EAAaF,GAAQG,KAAMC,GACxBA,EAAO1E,KAAOA,GAGvB,IAAKwE,EAAY,MAAM,IAAI3G,MAAM,UAAUmC,mBAE3C,OAAOwE,CAAU,EAGNG,GAAY3P,MAAOgL,EAAqB4E,KACnD,MAAMF,EAASH,GAAcvE,GAE7B,GAAsC,IAAlC4E,EAAejH,QAAQhI,OAAc,CACvC,IAAIb,EACJ,IAGE,OADAA,QAAa8P,EAAelH,aAAa,OAAQ,CAAEpB,QAAS,MACrD,IAAIoI,EAAO5P,EAKnB,CAJC,MAEAA,QAAa8P,EAAexE,gBACtBtL,EAAKuK,KAAK,sBAAsBvJ,IAAe4O,EAAOG,WAC7D,CAED,OAAO,IAAIH,EAAO5P,EACnB,CAGD,OAAO,IAAI4P,EADEE,EAAejH,QAAQ,GACb,ECnCZmH,GAAc9O,EAAKoB,QAAQC,EAAAA,QAAGC,SAAU,aAAc,WAE5DtC,eAAe+P,GAAOC,EAAqB/P,GAChD,MAAMgQ,SAAEA,EAAQC,SAACA,KAAaC,GAAoBlQ,EAClD8B,QAAQC,IAAIkO,GACZ,MAAMR,EAASH,GAAcY,EAAgBT,QAC7C,IAAKA,EAAQ,MAAM,IAAI7G,MAAM,wBAE7B,MAAMuH,QAAsBV,EAAOxN,SAASiO,GAEtCP,QAAuBS,UAAWC,SAASC,wBAC/CvP,EAAKiD,KAAK6L,GAAaK,EAAgBT,QACvC,CACEO,SAAUA,IAAY,EACtBC,SAAWA,GAAW,CAACM,MAAM,KAAKC,OAAO,KACzCC,KAAM,CAAC,+BAA+BN,IAAiB,oBAAoBA,IAAiB,uBAIhG,MAAO,CACLV,aAAcC,GAAUD,EAAO1E,GAAI4E,GACnCA,iBAEJ,qEC1ByB5P,MACvBgQ,GACE3G,OAAMM,WAAUT,kBAAiByH,MAE/B1P,EAAE,QAACwB,WAAWzB,EAAKiD,KAAK6L,GAAaa,EAAcjB,UACvDzO,EAAAA,QAAG4B,UAAU7B,EAAKiD,KAAK6L,GAAaa,EAAcjB,QAAS,CAAE5M,WAAW,IAExE,MAAM8M,eAAEA,SAAyBG,GAAOC,EAAaW,GACrD,IACE,MAAMjB,QAAeC,GAAUgB,EAAcjB,OAAQE,GAErD,aADMF,EAAO7P,MAAM,CAAEwJ,OAAMM,WAAUT,iBAC9B,CAACwG,EAAQA,EAAO5P,KAAM8P,EAI9B,CAHC,MAAO3I,GAEP,YADM2I,EAAe/D,QACf5E,CACP"}